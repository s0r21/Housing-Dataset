import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import statsmodels.formula.api as smf
import statsmodels.api as sm
from scipy import stats

# Importing the dataset
housing_Data = pd.read_csv('brooklyn_sales_map.csv')

#column_Name = housing_Data.columns.tolist() # -> Seeing the column names

#print(np.transpose(column_Name)) -> #printing the column names


housing_Data_Vars = pd.DataFrame(housing_Data,
                                 columns = ['sale_price',
                                            'land_sqft',
                                            'YearBuilt',
                                            'year_of_sale',
                                            'NumBldgs',
                                            'NumFloors']).replace(0, np.nan).dropna()



Y_Var = pd.DataFrame(housing_Data_Vars['sale_price'])
X_Vars = pd.DataFrame(housing_Data_Vars,
                      columns = ['NumBldgs',
                                 'NumFloors'])

#Lning the variables to test the relationships between Y & X Vars
ln_Y_Var = np.log(Y_Var)
ln_X_Var = np.log(X_Vars)
ln_Y_Var.dropna()
ln_X_Var.dropna()


print(len(ln_X_Var), len(ln_Y_Var))

#Using Sklearn for regression
X_train, X_test, Y_train, Y_test = train_test_split(ln_Y_Var,
                                                    ln_X_Var,
                                                    test_size = .99)

regress = LinearRegression().fit(ln_X_Var, ln_Y_Var)
print(regress.coef_)
print(regress.intercept_)

#Using Statsmodel - OLS to test the relationship between price & x-variables

regress_results = smf.ols('np.log(sale_price) ~'
                          'np.log(land_sqft) +'
                          'np.log(NumFloors)',
                          data = housing_Data_Vars).fit()
print(regress_results.summary())

#Resid Analysis. All the results prove that the residuals are NOT consistent with a normal distribution.
residual = regress_results.resid
Kurtosis = stats.kurtosis(residual)
Skewness = stats.skew(residual)
JB_Value, Pval = stats.jarque_bera(residual)
print(Kurtosis, Skewness, JB_Value)

#Graphing/Charing Resid. Distplot & Quantile-Quantile plot is consistent with the results above.
sns.distplot(residual)
sm.qqplot(residual,
           line = '45')
plt.show()


#print(len(Y_Var), len(X_Vars)) -> Checking the length of each variable. Making sure that dropna() is working
